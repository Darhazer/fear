# PEG grammar for pattern matching and extracting

module Fear::Extractor
  grammar Grammar
    rule matcher
      array / literal
    end

    rule array
      '[' (array_value_list / array_splat)? ']' <ArrayLiteral>
    end

    rule array_value_list
      array_head (array_tail / array_tail_splat)? <ArrayValueList>
    end

    rule array_tail
      ',' array_value_list <ArrayTail>
    end

    rule array_tail_splat
      ',' array_splat <ArrayTailSplat>
    end

    rule array_splat
      space? anonymous_array_splat space? <ArraySplat>
    end

    rule anonymous_array_splat
      '*' '_'? <AnonymousArraySplat>
    end

    rule array_head
      space? matcher space? <ArrayHead>
    end

    rule space
      [\s]+
    end

    rule variable
      [a-z_] [a-z0-9_]*
    end

    rule literal
      number
    end

    rule number
      float / integer
    end

    rule integer
      ('+' / '-')? [0-9]+ <IntegerLiteral>
    end

    rule float
      ('+' / '-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
    end

    rule string
      '"' ([^"\\] / "\\" . )* '"' <StringLiteral>
    end
  end
end
